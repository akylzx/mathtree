'use client'

import { Navbar } from "@/components/navbar"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CheckCircle } from "lucide-react"

const skills = [
  { id: 1, name: "–°–∞–Ω–∞—É", icon: "üî¢", level: 1, completed: true },
  { id: 2, name: "“ö–æ—Å—É", icon: "‚ûï", level: 2, completed: true },
  { id: 3, name: "–ê–∑–∞–π—Ç—É", icon: "‚ûñ", level: 2, completed: true },
  { id: 4, name: "–ö–µ–∑–µ–∫—Ç—ñ —Å–∞–Ω–∞—É", icon: "ü¶ò", level: 3, completed: false },
  { id: 5, name: "–ö”©–±–µ–π—Ç—É", icon: "‚úñÔ∏è", level: 3, completed: false },
  { id: 6, name: "–ë”©–ª—É", icon: "‚ûó", level: 3, completed: false },
  { id: 7, name: "–ë”©–ª—à–µ–∫—Ç–µ—Ä", icon: "üçï", level: 4, completed: false },
  { id: 8, name: "–ü—ñ—à—ñ–Ω–¥–µ—Ä", icon: "üìê", level: 4, completed: false },
  { id: 9, name: "–£–∞“õ—ã—Ç", icon: "üïê", level: 5, completed: false },
  { id: 10, name: "”®–ª—à–µ—É", icon: "üìè", level: 5, completed: false },
  { id: 11, name: "–ï—Å–µ–ø—Ç–µ—Ä", icon: "ü§î", level: 6, completed: false },
]

const skillsByLevel: Record<number, typeof skills> = skills.reduce((acc, skill) => {
  (acc[skill.level] = acc[skill.level] || []).push(skill)
  return acc
}, {} as Record<number, typeof skills>)

export default function ProgressPage() {
  const totalLevels = 6 // Assuming 6 levels in total, as requested
  const completedSkills = skills.filter(skill => skill.completed).length
  const totalSkills = skills.length
  const overallProgress = (completedSkills / totalSkills) * 100

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
      <Navbar />
      <main className="container mx-auto px-4 py-8 max-w-5xl">
        <h1 className="text-4xl font-bold text-primary mb-8 text-center">–°–µ–Ω—ñ“£ “Æ–ª–≥–µ—Ä—ñ–º—ñ“£! üöÄ</h1>
        <p className="text-lg text-muted-foreground mb-12 text-center">
          –û—Å—ã –∂–µ—Ä–¥–µ–Ω —Å–µ–Ω ”©–∑ –±—ñ–ª—ñ–º—ñ“£–Ω—ñ“£ “õ–∞–ª–∞–π ”©—Å—ñ–ø –∂–∞—Ç“õ–∞–Ω—ã–Ω –∫”©—Ä–µ –∞–ª–∞—Å—ã“£. –ñ–∞“£–∞ –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –∞—à—ã–ø, –¥–µ“£–≥–µ–π–ª–µ—Ä–¥—ñ –±–∞“ì—ã–Ω–¥—ã—Ä!
        </p>

        {/* Overall Progress Bar */}
        <Card className="p-6 mb-12 shadow-lg">
          <CardHeader>
            <CardTitle className="text-2xl mb-2">–ñ–∞–ª–ø—ã “Æ–ª–≥–µ—Ä—ñ–º</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between mb-3">
              <span className="font-semibold text-lg">{completedSkills} / {totalSkills} –¥–∞“ì–¥—ã –º–µ“£–≥–µ—Ä—ñ–ª–¥—ñ</span>
              <span className="text-primary text-xl font-bold">{overallProgress.toFixed(0)}%</span>
            </div>
            <div className="w-full bg-muted rounded-full h-4">
              <div
                className="bg-primary h-4 rounded-full transition-all duration-500"
                style={{ width: `${overallProgress}%` }}
              ></div>
            </div>
          </CardContent>
        </Card>

        {/* Levels Section */}
        {Array.from({ length: totalLevels }, (_, i) => i + 1).map((level) => (
          <div key={level} className="mb-10">
            <h2 className="text-3xl font-bold text-gray-800 mb-6 flex items-center">
              –î–µ“£–≥–µ–π {level}: {
                level === 1 ? "–ë–∞—Å—Ç–∞—É—à—ã" :
                level === 2 ? "–û“£–∞–π" :
                level === 3 ? "–û—Ä—Ç–∞—à–∞" :
                level === 4 ? "–ñ–∞“õ—Å—ã" :
                level === 5 ? "–ñ–æ“ì–∞—Ä—ã" :
                "–ú–∞—Å—Ç–µ—Ä"
              }
              <span className="ml-4 text-primary text-2xl">
                {skillsByLevel[level] && skillsByLevel[level].filter(s => s.completed).length === skillsByLevel[level].length && "üèÜ"}
              </span>
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {skillsByLevel[level] ? (
                skillsByLevel[level].map((skill) => (
                  <Card key={skill.id} className="p-5 flex items-center space-x-4 shadow-md">
                    <div className={`w-14 h-14 rounded-full flex items-center justify-center text-3xl
                      ${skill.completed ? "bg-green-100 text-green-600" : "bg-gray-100 text-gray-500"}`}
                    >
                      {skill.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-semibold">{skill.name}</h3>
                      <p className="text-muted-foreground">–î–µ“£–≥–µ–π {skill.level}</p>
                    </div>
                    {skill.completed && (
                      <CheckCircle className="text-green-500 w-6 h-6" />
                    )}
                  </Card>
                ))
              ) : (
                <p className="text-muted-foreground col-span-full">–ë“±–ª –¥–µ“£–≥–µ–π–¥–µ ”ô–ª—ñ –¥–∞“ì–¥—ã–ª–∞—Ä –∂–æ“õ.</p>
              )}
            </div>
          </div>
        ))}

        <div className="text-center mt-12">
          <Button size="lg">
            –ñ–∞“£–∞ –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –∑–µ—Ä—Ç—Ç–µ—É
          </Button>
        </div>
      </main>
    </div>
  )
}
